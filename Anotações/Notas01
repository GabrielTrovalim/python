Funções básicas: Print. -> Print, imprime letras e números na tela.

ex: print('Olá, mundo') -> Todo print que for imprimir palavras na tela precisa estar entre aspas e entre parênteses, para fazer a diferenciação entre letras e números.

Para números usamos o mesmo comando print, porém sem as aspas.

ex: print(6 + 4) -> Esse print executa a soma e mostra o resultado na tela.

Já, print('6' + '4') mostraria, 64 ao invés de 10 como resultado, por não ser interpretado como um número para uma conta, assim como no caso anterior.

Variáveis: Print + Variáveis.

Variáveis recebem e armazenam informações importantes para o funcionamento de um sistema, ou inseridos pelo usuário.

ex: nome = 'Gabriel' -> A variável (nome) recebe Gabriel, entre aspas para identificar se isso é ou não um número.

ex 02: nome = 'Gabriel'
       idade = 19

       print(nome, idade)

Diferente dos outros print, esse separa os itens por vírgula e não pelo sinal de mais, pois está tratando as variáveis.

OBS: O comando de terminal 'clear' limpa o terminal.

Input: Da mais interatividade com o usuário do programa, permitindo a entrada de dados.

Podemos usar uma variável e um input unidos para que a informação inserida seja armazenada.

ex: nome = input('Qual é o seu nome? ')
    print('O seu nome é', nome) -> isso mostra a mensagem e o nome colocado.

OBS: \n dentro de aspas quebra linhas na exibição do código escrito.

Formatação no print:

É possível colocar {} em um determinado lugar dentro das aspas simples ou duplas para recer a resposta formatada de uma variável.

sitaxe: print('oi, {}'.fotmat(var)) -> sendo var a variavel que vai ter o conteúdo exibido na tela.

Ainda nos desafios a resolução de um deles se dá pela presença de um tipo primitivo, o INT ou inteiro, que corresponde aos números inteiros que conhecemos na matemática.

Tipos primitivos:

int: (Números inteiros) -> 7 -4 0 9875
float:  (Números de ponto flutuante/ números reais) -> 4.5 0.076 -15.223 7.0
bool: (Só aceita dois valores) -> True False (OBS: É importante que true e false sejam escritos com a primeira letra em maiúsculo).
str: (Strings ou caractéres) -> 'Olá' '7.5' '' (OBS: É importante lembrar que toda string deve estar entre aspas duplas ou simples).

obs: {} -> É uma mascara de Formatação e mais de uma pode ser usada dentro de print.
ex: print('oi, {}. oi também {}'.format(nome1, nome2)) 

.format() -> Recebe outras funções para exibir o resultado de um exercício.
ex: print('{}'.format(type(algo))) -> Vai exibir o tipo de algo, que foi digitado pelo usuário.

Operadores Aritméticos

+ Adição -> 5 + 2 == 7
- Subtração -> 5 - 2 == 3
* Multiplicação -> 5 * 2 == 10
/ Divisão -> 5 / 2 == 2.5
** Potência -> 5 ** 2 == 25
// Divisão inteira -> 5 // 2 == 2
% Resto de Divisão -> 5 % 2 == 1

OBS: == significa (igual) diferente de = (recebe).

Ordem de precedência: 

1 - () tem parênteses, vai primeiro
2 - ** segunda coisa mais importante
3 - *(multiplicação) /(Divisão) //(Divisão inteira) %(Resto de divisão) tem o mesmo peso, nessa ordem.
4 - + (Adição) - (Subtração)

Centralização na mascara em print:

print('\nPrazer em te conhecer {:^20}! - Centralizado'.format(nome))
print('\nPrazer em te conhecer {:>20}! - Na direita'.format(nome))
print('\nPrazer em te conhecer {:<20}! - Na esquerda'.format(nome))

dentro da mascara temos {:20}, que faz com que o contúdo a ser mostrado na tela seja exibido em 20 espaços.
^ faz com que o conteúdo esteja Centralizado nos 20 espaços.
< faz o conteúdo ficar alinhado a esquerda dos espaços.
> faz o conteúdo ficar alinhado a direita dos espaços.

ainda nas mascaras podemos formatar números float muito extensos, com:
{:.2f} -> faz com que sómente dois números depois da vírgula sejam visíveis.

é possível aplicar contas dentro de .format().
ex: .format(n, (n+1), (n-1)) -> mostrará o número n, seu sucessor e seu antecessor. Podemos utilizar esse método quando não houver a necessidade de guardar variáveis com esses resultados.

Também podemos fazer um alinhamento nas mascaras fazendo com que elas tenham mais casas para ocupar.

ex: (antes) {} -> 5
            {} -> 80

    (deois) {:2} ->  5
            {:2} -> 80

Podemos utilizar comandos de print como: print('-' * 10) -> para repitir o caracter 10 vezes na tela do usuário.

OBS importante: Para um melhor funcionamento e manuntenção do espaço de memória utilizado pelo código, é melhor utilizar menos variáveis se for possível.